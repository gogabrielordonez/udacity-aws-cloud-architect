# Identify tools that will allow you to do the following:

## Scan infrastructure as code templates

From https://cybersecuritynews.com/infrastructure-as-code/ 

1. Checkov (https://www.checkov.io/)
This is one of the most recommended tools in 2021 to analyze static code which detects the cloud misconfiguration in Infrastructure as Code. This can scan the cloud infrastructure and manage the Terraform, Kubernetes, CloudFormation, etc.
Since this is a Python-based software, it makes simple everything like writing, coding, managing, vision control, etc. Checkov can give the best practice and compliance for the Google Cloud, AWS, and Azure. Checkov is open-source software that gives output in different formats like JSON, CLI, Junit XML, etc. This also helps to make you handle dynamic code effectively.
Support AWS, Microsoft Azure, and Google cloud.

2. TFLint (https://github.com/terraform-linters/tflint)
This is also called Terraform Iinter whose main work focuses on checking the possible error and serves the best security with Infrastructure as Code platform. Though this is an amazing tool for IaC, it validates the issues, and this is provider-specific. There you will get benefited if you get TFLint handy.
Tools always get updated, and you need to take the latest one to get the visible result, and you need to install these for windows, macOS, and docker. Some other providers also it will support AWS, Microsoft Azure, and Google cloud.

3. Terrafirma (https://github.com/wayfair/terrafirma)
This is another best tool that is best for static code analysis. It gives its best use for the Terraform plans. It detects security misconfigurations.
If you can use it properly, then it gives you the perfect result instead of JSON. This is perfect in everything, so users are happy while using them. While installing it, you need to use virtualenv and wheels.

4. Accurics  (https://www.accurics.com/)
By using accuri cs you can protect your cloud infrastructure so that it cannot be misconfigured and must have proper policy violation. It will also have potential data. Accurics also has code scanning for Terraform, Dockerfile, OpenFaaS YAML, etc.
If you can detect the issue, then you can easily take the remedies and solve the problem in Infrastructure as Code. While running these accurics, ensure that in infrastructure configuration, there should not be any defect.
You need to protect the complete cloud stack which includes software container, infrastructure, servers, etc. It’s primary work is to eliminate the drift and detect the changes, and it also create posture drift.
Using this software, you can notify the developers of any issues regarding workflow like Slack, email, Splunk, JIRA, and much more. If you need this cloud version for your organization then you can download the self-hosted version depending on the requirement.

5. CloudSploit  (https://cloudsploit.com/)
If you want to scan Cloudformation templets within seconds then you need to use CloudSploit. Through this, you can do a scan of 95 security vulnerabilities and it consists of AWS products.
This tool helps to detect the risk efficiently, and before it starts, cloud infrastructure, the user has to implement the security feature. It also offers plugin-based scan so that you can add security depending on the resource, and this can be an addition to AWS.
CloudSploit thinks about user convenience, so only it provides API access. You will even get the drag-and-drop feature where you will get the result in few seconds.
You need to upload the template into the scanner, it will automatically compare each resource setting and unidentified the values.
After that, it will provide you result then you will come to know about, warning, fail or pass. Besides this, you can check every result to see the affected resource.


In my personal opinion, all the tools are good enough to identify security risks in the infraestructure-as-code developments. I'll study more Ckeckov, because has a community support in slack. 


### Example vulnerability

From https://notsosecure.com/security-architecture-review-of-a-cloud-native-environment/ 

They used the tfsec tool. Some screenshots are from the output that they got after executing the tfsec tool on their terraform scripts.
1. tfsec detecting a fully open ingress security group
2. tfsec detecting hard-coded passwords
3. tfsec detecting an unencrypted S3 bucket


##Scan AMI’s or containers for OS vulnerabilities

From: https://aws.amazon.com/es/blogs/security/how-to-set-up-continuous-golden-ami-vulnerability-assessments-with-amazon-inspector/
Amazon Inspector is used to set up continuous vulnerability assessments to scan AMIs routinely.

From https://aws.amazon.com/es/blogs/compute/scanning-docker-images-for-vulnerabilities-using-clair-amazon-ecs-ecr-aws-codepipeline/
AWS CodePipeline is used to scan your container images for known security vulnerabilities and deploy the container only if the vulnerabilities are within the defined threshold.


### Example vulnerability
From:
https://docs.aws.amazon.com/inspector/latest/userguide/inspector_security-best-practices.html

Some of the examples of vulnerability that Amazon Inspector is able to identify are descripted in the document for best practices:

- Root login over SSH
- SSH version supported
- Password authentication Over SSH
- Old passwords
- Password with short length
- Lack of permissions for system directories


##Scan an AWS environment for cloud configuration vulnerabilities
From: https://geekflare.com/aws-vulnerability-scanner/ 

1. AWS Config (https://aws.amazon.com/config/)
AWS Config is an effective tool for assessing, evaluating, recording, auditing configurations of the resources in your AWS environment. It simplifies security analysis, compliance auditing, operational troubleshooting, and change management.

2. Cloud Custodian (https://github.com/cloud-custodian/cloud-custodian)
Cloud Custodian is a flexible open-source rules engine for managing the AWS cloud resources and accounts to ensure security and policy compliance. This allows you to manage and optimize security, costs, and governance of your AWS cloud environment.

3. Prowler (https://github.com/toniblyx/prowler)
Prowler is an AWS account’s security configuration assessment, auditing, and hardening tool that also checks compliance with the CIS AWS Foundations security standards. Further, the tool performs over 100 additional checks, including HIPAA, GRDR, forensics readiness, trust boundaries, and more.
The Prowler command-line tool covers several identity and access management practices, logging, monitoring, and other security assessment activities on Amazon accounts such as the Redshift, CloudFront, ElasticCache, Elasticsearch, API Gateway, and others.

4. Cloudmapper (https://github.com/duo-labs/cloudmapper)
Cloudmapper is an open-source tool that enables you to analyze and build an interactive visualization of assets, services, and other components in your AWS environment.
Generally, the tool allows developers to check and understand the type of environments they have built. It does this by collecting the data from your AWS accounts and then converts it into a browser-accessible format.

5. Cloud Reports (https://github.com/tensult/cloud-reports)
Cloud reports from Tensult is a node.js based open source tool for collecting and analyzing a wide range of information from various cloud components. The tool compares the findings against the best practices.
It then generates reports, which are usually in HTML, CSV, JSON, or PDF, to show the different AWS services running along with the best practices you should follow. This also contains issues it has identified as well as their impact on your services.

6. AWStealth (https://github.com/cyberark/SkyArk/tree/master/AWStealth)
AWStealth is a security that tool teams use to discover the most privileged entities in the AWS cloud environment. The scan results show the users with excessive, risky, or sensitive permissions. And this enables the security teams to identify the most privileged accounts that they need to properly secure from potential attacks and exploits.
Typical AWS entities with sensitive privileges that should be on the radar include the straight-forward admins as well as the risky shadow admins.

7. Salesforce Policy sentry (https://github.com/salesforce/policy_sentry)
Policy sentry is an AWS IAM privilege management tool. It has an IAM least privilege policy generator, an audit mechanism, and an analysis database. The tool compiles database tables according to the AIM documentation about the resources, actions, and condition keys. It then uses this data to create IAM least-privilege policies.

8. Komiser (https://komiser.io/)
Komiser is a comprehensive inspection and analysis tool that helps you to monitor and control expenses for your AWS cloud platform. The open-source cost optimization tool can inspect the cloud platform and check for a wide range of configuration and cost issues. This discovers any hidden costs and provides you with recommendations to help you save and remain within budget.

9. Alien Vault (https://cybersecurity.att.com/solutions/aws-siem)
Alien Vault USM (Unified Security Management), one of the market leaders in SIEM (Security Information and Event Management) solution for AWS.
USM is a single security monitoring platform to provide visibility of what’s happening so you can take full control of AWS cloud and manage risk.

10. CloudSploit (https://cloudsploit.com/)
CloudSploit is capable of detecting hundreds of threats in the AWS account by automated security scanning and configuration monitoring.

In my personal opinion, there are a lot of good tools in the market that complement the AWS security tools, that are really powerfull. All the tools has a proven value that should be analyzed for all AWS Solution Architect.


### Example vulnerability
All the tools used for scanning for AWS environment configuratio vulnerabilities, allows to verify security compliance with several controls and good practices, as can be, for example, the Center for Internet Security® (https://www.cisecurity.org/).
Some of the vulnerabilities in this frame are:

1.1 Avoid the use of the "root" account (Scored)
1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password (Scored)
1.3 Ensure credentials unused for 90 days or greater are disabled (Scored)
1.7 Ensure IAM password policy require at least one symbol (Scored)
1.12 Ensure no root account access key exists (Scored)
1.14 Ensure hardware MFA is enabled for the "root" account (Scored)
2.1 Ensure CloudTrail is enabled in all regions (Scored)
3.1 Ensure a log metric filter and alarm exist for unauthorized API calls (Scored)
4.1 Ensure no security groups allow ingress from 0.0.0.0/0 to port 22 (Scored)
4.2 Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389 (Scored)
And so on...

